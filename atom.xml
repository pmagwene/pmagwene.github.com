<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Paul's Computing Recipes]]></title>
  <link href="http://pmagwene.github.com/atom.xml" rel="self"/>
  <link href="http://pmagwene.github.com/"/>
  <updated>2013-02-07T21:50:37-05:00</updated>
  <id>http://pmagwene.github.com/</id>
  <author>
    <name><![CDATA[Paul M. Magwene]]></name>
    <email><![CDATA[paul.magwene@duke.edu]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Pandoc Worflow for Writing Letters in LaTeX]]></title>
    <link href="http://pmagwene.github.com/blog/2013/02/07/pandoc-latex-letters/"/>
    <updated>2013-02-07T00:00:00-05:00</updated>
    <id>http://pmagwene.github.com/blog/2013/02/07/pandoc-latex-letters</id>
    <content type="html"><![CDATA[<p><a href="">Pandoc</a> is a wonderful tool for facilitating a plain text based workflow.  I wanted to see if I could integrate Pandoc with my custom LaTeX letter template.  </p>

<!-- more -->

<p>Pandoc generally lets LaTeX through unchanged, but it didn’t seem to like the <code>\begin{letter}{addressee \\ etc. }</code> construct. </p>

<p>The Pandoc solution to this sort of thing is to use a custom template in combination with the <code>--variable=KEY:VALUE</code> construct at the command line.</p>

<h4 id="custom-template">Custom template</h4>

<p>Here’s a minimal custom template we’ll call <code>minletter.latex</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">\documentclass[11pt]{letter}
</span><span class="line">
</span><span class="line">\address{John Q. Public \\ 1234 Main St. \\ Smalltown, CA 91234}
</span><span class="line">\signature{John Q. Public}
</span><span class="line">
</span><span class="line">\begin{document}
</span><span class="line">$if(addressee)$
</span><span class="line">\begin{letter}{$addressee$}
</span><span class="line">$else$
</span><span class="line">\begin{letter}{\mbox{}\\\mbox{}}
</span><span class="line">$endif$
</span><span class="line">
</span><span class="line">$body$
</span><span class="line">
</span><span class="line">\closing{Sincerely,}
</span><span class="line">\end{letter}
</span><span class="line">\end{document}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Like all Pandoc custom templates this should be saved in <code>~/.pandoc/templates</code>.</p>

<h4 id="an-example-letter">An example letter</h4>

<p>Here’s a simple letter that we can pass to Pandoc. Name this <code>letter-to-joe.md</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">\opening{Dear Joe,}
</span><span class="line">
</span><span class="line">How are you?  It's been a long time since we've been in touch. 
</span><span class="line">Sorry about that $50 I borrowed and never returned. 
</span><span class="line">Isn't it about time we patched things up?  
</span><span class="line">By the way, might you have a couple hundred bucks I can borrow? 
</span><span class="line">I promise to pay you back soon.</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="processing-the-letter-with-pandoc">Processing the letter with Pandoc</h4>

<p>We can then call Pandoc as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pandoc letter-to-joe.md -o letter-to-joe.pdf --template minletter --variable=addressee:"Joe McShmoe \\ 9876 Mulberry Ln. \\ Salinas, CA 97654"</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="can-we-improve-on-this">Can we improve on this?</h4>

<p>The above example works, but it’s not self documenting.  Six months from now if I want to write a follow-up letter to Joe (for another loan!) I’ll have to lookup his address again as well as remember the Pandoc command line options I used.</p>

<p>The solution I came up with is based on a a simple Python build system called <a href="http://code.google.com/p/fabricate/">Fabricate</a>. Fabricate is a single file Python library that can be used to create build scripts for a wide variety of programming languages, command line tools, etc.  To install Fabricate just make sure <code>fabricate.py</code> (see website) is somewhere in your <code>PYTHONPATH</code>.</p>

<h4 id="a-fabricate-make-file">A fabricate make file</h4>

<p>Here’s a very simple Fabricate build script for our letter above. Name this <code>letter-to-joe.mk</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">from fabricate import *
</span><span class="line">
</span><span class="line">input = "letter-to-joe.md"
</span><span class="line">output = "letter-to-joe.pdf"
</span><span class="line">addressee = r'Joe McShmoe \\ 9876 Mulberry Ln. \\ Salinas, CA 97654'
</span><span class="line">
</span><span class="line">template = "minletter.latex"
</span><span class="line">
</span><span class="line">run('pandoc', input,
</span><span class="line">	'-o', output, 
</span><span class="line">	'--template', template,
</span><span class="line">	'--variable=addressee:%s' % addressee)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can now build the letter simply by typing the following from the command line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">python letter-to-joe.mk</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next time I need to write a letter to Joe (or anyone else for that matter) I can simply copy my build script to a new file (e.g. <code>followup-to-joe.mk</code>) and change the input, output, and addressee fields as appropriate.</p>

<h5 id="other-ways-to-do-this">Other ways to do this?</h5>

<p>Have you come up with another, perhaps more elegant, solution? If so, please leave a comment describing your approach!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Bio++ and Egglib from source]]></title>
    <link href="http://pmagwene.github.com/blog/2013/02/06/building-bio-plus-plus-and-egglib/"/>
    <updated>2013-02-06T13:19:00-05:00</updated>
    <id>http://pmagwene.github.com/blog/2013/02/06/building-bio-plus-plus-and-egglib</id>
    <content type="html"><![CDATA[<p>It took a little finagling to build the Python module <a href="http://egglib.sourceforge.net/">egglib</a> for population genetic analyses.  Here’s how I did it.</p>

<!-- more -->

<p>Platform on which this was tested:</p>

<ul>
  <li>OS X 10.7</li>
  <li>Apple Xcode command line tools</li>
  <li>Many tools install via <a href="http://mxcl.github.com/homebrew/">Homebrew</a></li>
</ul>

<h3 id="pre-requisites-for-bio">Pre-requisites for Bio++</h3>

<p>Install the following via brew:</p>

<ul>
  <li>cmake – <code>brew install cmake</code></li>
  <li>doxygen – <code>brew install doxygen</code></li>
</ul>

<h3 id="building-and-installing-bio">Building and installing Bio++</h3>

<h5 id="create-a-temporary-directory-to-build-the-libraries">Create a temporary directory to build the libraries</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mkdir -p ~/tmp/bpp</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="download-and-unzip-the-libraires">Download and unzip the libraires</h5>

<p>We just need three of the Bio++ libraries:</p>

<ol>
  <li>bpp-core</li>
  <li>bpp-seq </li>
  <li>bpp-popgen</li>
</ol>

<p>Use <code>curl</code> from the command line to download the libraries:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ~/tmp/bpp
</span><span class="line">curl -O http://biopp.univ-montp2.fr/repos/sources/bpp-core-2.0.3.tar.gz
</span><span class="line">curl -O http://biopp.univ-montp2.fr/repos/sources/bpp-seq-2.0.3.tar.gz
</span><span class="line">curl -O http://biopp.univ-montp2.fr/repos/sources/bpp-popgen-2.0.3.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And then unzip each library:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tar xvzf bpp-core-2.0.3.tar.gz
</span><span class="line">... etc ...</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="building-individual-bio-libraries">Building individual Bio++ libraries</h5>

<p>Build the libraries in the following order:</p>

<ol>
  <li>bpp-core</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ~/tmp/bpp/bpp-core-2.0.3
</span><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr/local
</span><span class="line">make             # warnings are OK, errors are not
</span><span class="line">make install     # if you didn't get any errors during make</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>bpp-seq</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ~/tmp/bpp/bpp-seq-2.0.3
</span><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr/local
</span><span class="line">make            
</span><span class="line">make install     </span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>bpp-popgen</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ~/tmp/bpp/bpp-popgen-2.0.3
</span><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr/local
</span><span class="line">make             
</span><span class="line">make install    </span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="pre-requisites-for-egglib">Pre-requisites for egglib</h3>

<p>These aren’t required but we might as well install them.</p>

<p>First, let’s “tap” the Homebrew science packages:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew tap homebrew/science</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then install all the following via brew:</p>

<ul>
  <li>gsl – <code>brew install gsl</code></li>
  <li>clustalw – <code>brew install clustal-w</code></li>
  <li>muscle – <code>brew install muscle</code></li>
  <li>paml – <code>brew install paml</code></li>
  <li>phyml – <code>brew install phyml</code></li>
  <li>primer3 – <code>brew install primer3</code></li>
  <li>phylip – <code>brew install phylip</code></li>
</ul>

<h3 id="building-and-installing-egglib">Building and installing egglib</h3>

<p>Download the following source packages from the <a href="http://sourceforge.net/projects/egglib/files/current/">egglib sourceforge site</a>:</p>

<ul>
  <li>egglib-cpp-2.1.5.tar.gz</li>
  <li>egglib-py-2.1.5.tar.gz</li>
</ul>

<p>Move these to a temporary directory (e.g. <code>~/tmp/egglib</code>) and unzip them (<code>tar xvzf ....</code>).</p>

<h5 id="build-the-egglib-c-library">Build the egglib c++ library</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd egglib-cpp-2.1.5
</span><span class="line">./configure
</span><span class="line">make
</span><span class="line">make install  # assuming make return with no errors</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="build-the-egglib-python-library">Build the egglib Python library</h5>

<p>When I tried to build the egglib Python library, <code>setup.py</code> wasn’t finding the appropriate version of gcc for some reason. Here’s how I fixed that (note the addition of the <code>CC</code> environment variable before the <code>setup.py</code> call):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd egglib-py-2.1.5
</span><span class="line">CC=/usr/bin/gcc python setup.py build
</span><span class="line">CC=/usr/bin/gcc python setup.py install  # assuming previous step was error free</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="test-your-installation-of-egglib">Test your installation of egglib</h3>

<p>Confirm that egglib import’s correctly:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ python
</span><span class="line">Python 2.7.3 (v2.7.3:70274d53c1dd, Apr  9 2012, 20:52:43) 
</span><span class="line">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
</span><span class="line">Type "help", "copyright", "credits" or "license" for more information.
</span><span class="line">&gt;&gt;&gt; import egglib
</span><span class="line">&gt;&gt;&gt; quit()</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inaugurating the blog]]></title>
    <link href="http://pmagwene.github.com/blog/2013/01/18/inaugurating-the-blog/"/>
    <updated>2013-01-18T23:46:00-05:00</updated>
    <id>http://pmagwene.github.com/blog/2013/01/18/inaugurating-the-blog</id>
    <content type="html"><![CDATA[<p>This post kicks off my Github blog. I’ve been “Githubbing” since Fall 2011, but haven’t  setup my Github page until now, because I found the whole configuration of Jekyll to be confusing and daunting. <a href="http://octopress.org/">Octopress</a> to the rescue!</p>
]]></content>
  </entry>
  
</feed>
